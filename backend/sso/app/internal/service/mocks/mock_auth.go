// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuth) SignIn(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignIn", arg0)
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthMockRecorder) SignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuth)(nil).SignIn), arg0)
}

// SignOut mocks base method.
func (m *MockAuth) SignOut(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignOut", arg0)
}

// SignOut indicates an expected call of SignOut.
func (mr *MockAuthMockRecorder) SignOut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockAuth)(nil).SignOut), arg0)
}

// VerifyToken mocks base method.
func (m *MockAuth) VerifyToken(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyToken", arg0)
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthMockRecorder) VerifyToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuth)(nil).VerifyToken), arg0)
}
